// توابع

// تابع رو میتونیم بیرون مین بنویسیم ولی موقع صدا زدن تابع حتما باید داخل مین صداش بزنیم

// مثال اول ساخت تابع

// void main(List<String> args) {
//   printMyWebsite() {
//     print('My Website is KianCoding.com');
//   }
//   printMyWebsite();
// }

// output:      My Website is KianCoding.com
// -------------------------------------------------------------------------------------------------------------
//  استفاده از ریترن به جای پرینت
// وقتی از ریترن استفاده میکنیم تابع داده ی خام بهمون برمیگردونه
// و ما میتونیم  هر عملیاتی ک بخایم روی اون داده انجام بدیم

// مثال ریترن
// در این مثال بخاطر اینکه از ریترن استفاده کردم تونستم
// تمام حروف خروجی تابع رو به حروف کوچک تبدیل کنم

// void main(List<String> args) {
//   printMyWebsite() {
//     return 'My Website is KIANCODING.COM';
//   }
//   print(printMyWebsite().toLowerCase());
// }

// output:   my website is kiancoding.com
// ----------------------------------------------------------------------------------------------------------------------
// data type functions
// ما میتونیم نوع داده ای که قراره داخل تابع استفاده بشه رو مشخص کنیم
// مثل تایین کردن نوع داده در متقییر ها

// در این مثال ما نوع داده تابع رو لیست گزاشتیم
// بغییر از لیست هر چیزی که بخایم میتونیم بزاریم
// اگر هم نمیدونستیم که چی قراره داخل تابع ذخیره بشه میتونیم نوع داده تابع رو مشخص نکنیم
// و در اخر هم چون از ریترن استفاده کردیم تونستیم از ور استفاده کنیم و فقط اعداد زوج رو برگردونیم

// import 'dart:io';

// void main(List<String> args) {
//   List intList() {
//     return [1,5,6,9,10,4,55,10,22,56,8,10];
//   }
//   List result = intList().where((a) => a %2 == 0).toList();
//   print(result);
// }

// output:         [6, 10, 4, 10, 22, 56, 8, 10]
// --------------------------------------------------------------------------------------------------------------------------------
// void چیست
// معنی کلمه ووید یعنی خالی یا پوچ

// وقتی ما پشت اسم تابع از کلمه ی ووید استفاده کنیم دیگه نمیتونیم داده ای
// رو ریترن کنیم چون ما گفتیم تابع ما پوچ هستش و کار خاصی نمیخاد انجام بده
// بخاطر همین اگر پشت تابع از ووید استفاده کردیم باید برای نمایش داده
// از پرینت استفاده کنیم

// مثال

// void main(List<String> args) {
//   void printName() {
//    print('omidkarimi') ;
//   }
//   printName();
// }

// output:      omidkarimi
// ----------------------------------------------------------------------------------------------------------------------
//  انواع آرگومانها در توابع

// ارگومان اول
// Required Arguments   آرگومتن های ضروری

// مثال
// در این مثال ما برای تابع سه تا ارگومان ضروری تایین کردیم
// و موقع استفاده از تایع باید چون ضروریه
// باید مقدارهارو بهش بدیم وگرنه کد اجراع نمیشه

// void main(List<String> args) {
//   printMyWebsite(String website, int age, String names) {
//     return 'my is website: $website\nmy is age: $age\nmy is names: $names';
//   }
//   print(printMyWebsite('kiancoding.com', 30, 'omidkarimi').toUpperCase());
// }

// output:
// MY IS WEBSITE: KIANCODING.COM
// MY IS AGE: 30
// MY IS NAMES: OMIDKARIMI
// -------------------------------------------------------------------------------------------------------------------
// چند تا نکته به خاطر اضافه شدن نال سفتی به دارت

// 1 : اگر تابع ای که ساختیم رو تایپ یا نوعش رو مشخص کردیم یا باید نال سفتی رو با علامت
// سوال فعال کنیم یا برای نمایش از ریترن استفاده کنیم

// توی این روش اجازه نال بودن رو فعال کردیم
// و تونستیم بدون استفاده از ریترن با پرینت کارمون رو انجام بدیم

// String? printName() {
//     print('omid');
// }

// // در این روش به جای اجازه نال از ریترن استفاده کردیم
// String printName () {
//     return 'omid';
// }

// // 2 : در غیر اینصورت اگه بخایم از پرینت استفاده کنیم پشت تابع از ووید استفاده میکنیم

// // در این روش هم از ووید استفاده کردیم
// // توی این روش چون از ووید استفاده کردیم
// // میتونیم از پرینت استفاده کنیم

// void printName() {
//     print('omid');
// }
// ==============================================================================================================================
// انواع آرگومانها در توابع

// آرگومان دوم
// Optional Positinal Argument    آرگومان‌های موقعیتی اختیاری

// در این مثال ما ورودی سن رو دلبخواهی ساختیم که اگر کاربر سن رو وارد کرد
// که در خروجی نشونش بده ولی اگر وارد نکرد با خطا مواجح نشه و مقدار که
// خودمون مشخص کردیم رو برگردونه

// **************************   [int age = 0]  => اینجوری هم میتونیم مقدار خودمون رو وارد کنیم

// void printMyInfo(String name, String website, [int? age]) {
//   if (age == null) {
//     age = 0;
//   }
//   print('my name is $name. my website is $website. age is $age');
// }

// void main(List<String> args) {
//   printMyInfo('omid', 'kiancoding.com');
// }

// خروجی اگر کابر سن رو وارد کرده باشه
// my name is omid. my website is kiancoding.com. age is 20

// خروجی اگر کاربر سن رو وارد نکرده باشه
// my name is omid. my website is kiancoding.com. age is 0
// ===============================================================================================================================
// انواع آرگومانها در توابع

// آرگومان سوم
// Optional Named Argument
// در این نوع ما میتونیم چند ارگومان اختیاری پشت سر هم تولید کنیم
//  ولی نکته اول اینه که بای داخل براکت فرفری باشند
// و موقع مقدار دهی هم باید متقییر و مقدار با هم وارد شود

// void main(List<String> args) {
//   void printMyInfo(String name, String website, {int age = 0, String last = ''}) {
//   print('my name is $name. my website is $website. my age is $age. last is $last');

//   }
//   printMyInfo('omid', '4rahecode', age: 31, last: 'karimi'
// );

// }

// output:
//   printMyInfo('omid', '4rahecode',age: 31,last: 'karimi');
// my name is omid. my website is 4rahecode. my age is 31. last is karimi

// output:
// printMyInfo('omid', '4rahecode');
// my name is omid. my website is 4rahecode. my age is 0. last is
// =====================================================================================================================
// انواع آرگومانها در توابع

// آرگومان سوم
// Optional Parameter With Default Value

// در این نوع میتونیم برای زیبایی کدمون اون ورودیهایی که ضروری هستند رو هم
// موقع مقدار دهی مجبود کنیم نام متغییرش مشخص بشه
// برای اینکار باید ورودیهای مود نظر رو هم داخل براکت فرفری قرار بدیم و پشت اونها از کلمه ی
// استفاده کنیم required

// void main(List<String> args) {
//   void printMyInfo( {required String name, required String website, int age = 0, String last = ''}) {
//   print('my name is $name. my website is $website. my age is $age. last is $last');

//   }
//   printMyInfo(name: 'omid',website:  '4rahecode', age: 31, last: 'karimi');

// }

// output;
// my name is omid. my website is 4rahecode. my age is 31. last is karimi
// ==============================================================================================================================
// ریختن یک تابع در یک متغییر

// ما میتونیم توابع بسازیم و بعد تابع رو داخل یک متغییر بریزیم
// و از این به بعد هر وقت اسم اون متغییر رو صدا بزنیم تمام
// خصوصیات تابع ای که ساختیم رو داره

// مثال

// تابع رو ساختیم
// hi(name) {
//     print('Hello $name');
// }

// // ریختیمش داخل متغییر
// var welcome = hi;

// // و اینجا متغییر رو صدا زدیم
// void main(List<String> args) {
//   welcome('omid');
// }

// output:       Hello omid
// =====================================================================================================================
// استفاده تابع و لیست در یک تابع دیگر

// در این مثال از یک تابع و یک لیست در یک تابع دیگر استفاده کردیم 
// و مقدارهای داخل لیست را پاس دادیم به تابع دابل نام که ضربدر 2 میکنه
// و در اخر تمام مقدارهای لیست رو ضربدر دو شده بهمون برگردوند



// doubleNum(num) {
//   return 2 * num;
// }


// void printNumbers(List values, Function func) {
//   for (var i in values) {
//     var result = doubleNum(i);
//     print('input: $i output: $result'); 
//   }
// }

// void main(List<String> args) {
//   printNumbers([10,45,2], doubleNum);
// }

// output:

// input: 10 output: 20
// input: 45 output: 90
// input: 2 output: 4
// ========================================================================================================================
// به دست اوردن محیط و مساحت مستطیل

// void toolMostatil(int tool, int arz) {
//   var mohit = 2 * (tool + arz);
//   print('mohit mostatil: $mohit');
// }


// masahatMostatil(int arz, int tool) {
//   var masahat = (arz * tool);
//   return 'masahat mostatil: $masahat';
// }

// void main(List<String> args) {
//   toolMostatil(10, 70);
//   print(masahatMostatil(50, 80));
// }

// output:
// mohit mostatil: 160
// masahat mostatil: 4000
// ===============================================================================================================
// توابع یک خطی مثال اول

// مثال اول با پرینت مستقیم 
// این نوع توابع اون علامت مساوی با بزرگتر نشانه ریترن 
// کردن هستش و وقتی ما از پرینت استفاده میکنیم 
// یعنی اون علامت ریترن رو نادیده میگیریم


// printMassage(String website) => print(website);

// void main(List<String> args) {
//   printMassage('4rahecode.com');
// }

// output:     4rahecode.com
// ---------------------------------------------------------------------------------
// مثال دوم استفاده از ریترن 
// در این مثال گفتیم اگر عدد زوج بود ترو برگردون
// و اگر عدد زوج نباشه خودش اتومات فالس برمیگردونه


// even(int number) => number %2 == 0;

// void main(List<String> args) {
//   print(even(12));
// }

// output: true
// --------------------------------------------------------------------------------
// مثال سوم توابع یک خطی 
// در این مثال دو مقدار میگیریم و با هم جمشون میکنیم

// sum(int num1, int num2) => num1 + num2;

// void main(List<String> args) {
//   print(sum(20, 10));
// }
// output:  30
// ======================================================================================
// تابع لامبدا
// اینجور توابع زمانی استفاده میشه که همون لحضه بخایم کد اجراع بشه 

// مثال

// void main(List<String> args) {
//   List lst = [1,2,3,4];
//   lst.forEach(print);
// }

// output:
// 1
// 2
// 3
// 4
// ===============================================================================================================
